[{"/home/dev/workspace/Task-List-Typescript-With-API-s/src/index.tsx":"1","/home/dev/workspace/Task-List-Typescript-With-API-s/src/Pages/Main/Main.tsx":"2","/home/dev/workspace/Task-List-Typescript-With-API-s/src/Pages/InitialScreen/InitialScreen.tsx":"3","/home/dev/workspace/Task-List-Typescript-With-API-s/src/Contexts/UserContext.tsx":"4","/home/dev/workspace/Task-List-Typescript-With-API-s/src/components/LoginComponent/LoginComponent.tsx":"5","/home/dev/workspace/Task-List-Typescript-With-API-s/src/components/RegisterComponent/RegisterComponent.tsx":"6","/home/dev/workspace/Task-List-Typescript-With-API-s/src/App.tsx":"7","/home/dev/workspace/Task-List-Typescript-With-API-s/src/components/Elements/CustomInput.tsx":"8","/home/dev/workspace/Task-List-Typescript-With-API-s/src/components/TaskList/TaskList.tsx":"9","/home/dev/workspace/Task-List-Typescript-With-API-s/src/components/AddItemComponent/AddItemComponent.tsx":"10","/home/dev/workspace/Task-List-Typescript-With-API-s/src/components/TaskListItem/TaskListItem.tsx":"11","/home/dev/workspace/Task-List-Typescript-With-API-s/src/components/Elements/CustomTextArea.tsx":"12","/home/dev/workspace/Task-List-Typescript-With-API-s/src/components/Elements/CustomButton.tsx":"13","/home/dev/workspace/Task-List-Typescript-With-API-s/src/theme/index.tsx":"14"},{"size":708,"mtime":1612552426113,"results":"15","hashOfConfig":"16"},{"size":4296,"mtime":1612560702472,"results":"17","hashOfConfig":"16"},{"size":909,"mtime":1612556707250,"results":"18","hashOfConfig":"16"},{"size":205,"mtime":1612559459325,"results":"19","hashOfConfig":"16"},{"size":2789,"mtime":1612559298308,"results":"20","hashOfConfig":"16"},{"size":3496,"mtime":1612559317054,"results":"21","hashOfConfig":"16"},{"size":788,"mtime":1612559480583,"results":"22","hashOfConfig":"16"},{"size":629,"mtime":1612549450375,"results":"23","hashOfConfig":"16"},{"size":604,"mtime":1612552389685,"results":"24","hashOfConfig":"16"},{"size":2453,"mtime":1612556384976,"results":"25","hashOfConfig":"16"},{"size":698,"mtime":1612554704559,"results":"26","hashOfConfig":"16"},{"size":645,"mtime":1612556506538,"results":"27","hashOfConfig":"16"},{"size":790,"mtime":1612556481917,"results":"28","hashOfConfig":"16"},{"size":171,"mtime":1612546199897,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"nklul1",{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/dev/workspace/Task-List-Typescript-With-API-s/src/index.tsx",[],"/home/dev/workspace/Task-List-Typescript-With-API-s/src/Pages/Main/Main.tsx",["62"],"/home/dev/workspace/Task-List-Typescript-With-API-s/src/Pages/InitialScreen/InitialScreen.tsx",[],"/home/dev/workspace/Task-List-Typescript-With-API-s/src/Contexts/UserContext.tsx",[],"/home/dev/workspace/Task-List-Typescript-With-API-s/src/components/LoginComponent/LoginComponent.tsx",[],"/home/dev/workspace/Task-List-Typescript-With-API-s/src/components/RegisterComponent/RegisterComponent.tsx",[],"/home/dev/workspace/Task-List-Typescript-With-API-s/src/App.tsx",[],"/home/dev/workspace/Task-List-Typescript-With-API-s/src/components/Elements/CustomInput.tsx",["63"],"import React from 'react';\n// import styles from './CustomInput.module.css';\nimport {\n    FormControl,\n    FormLabel,\n    FormErrorMessage,\n    Input,\n    Center\n} from \"@chakra-ui/react\";\n\nexport const CustomInput: React.FC<customInputProps> = ({ label, type, name, register, error = '' }: customInputProps) => {\n    return (\n        <FormControl id={name} mt={5} isInvalid={error != ''}>\n            <FormLabel>{label}</FormLabel>\n            <Input type={type} name={name} ref={register} />\n            <Center>\n                <FormErrorMessage>{error}</FormErrorMessage>\n            </Center>\n        </FormControl>\n    );\n}",["64","65"],"/home/dev/workspace/Task-List-Typescript-With-API-s/src/components/TaskList/TaskList.tsx",[],"/home/dev/workspace/Task-List-Typescript-With-API-s/src/components/AddItemComponent/AddItemComponent.tsx",[],"/home/dev/workspace/Task-List-Typescript-With-API-s/src/components/TaskListItem/TaskListItem.tsx",["66"],"import React from 'react';\nimport { CustomButton } from '../Elements/CustomButton';\nimport { Box, Flex, Spacer, Text } from '@chakra-ui/react';\n\ninterface Props {\n    task: Task,\n    deleteTaskParent: (_id: string) => void\n}\n\nexport const TaskListItem: React.FC<Props> = ({ task, deleteTaskParent }) => {\n    return (\n        <Flex align={'center'} borderBottomWidth={1} p={5} m={1}>\n            <Text>{task.description}</Text>\n            <Spacer />\n            <CustomButton\n                label='-'\n                type='button'\n                click={() => {\n                    deleteTaskParent(task._id)\n                }}\n                color='red'\n            />\n        </Flex>\n    );\n};","/home/dev/workspace/Task-List-Typescript-With-API-s/src/components/Elements/CustomTextArea.tsx",[],"/home/dev/workspace/Task-List-Typescript-With-API-s/src/components/Elements/CustomButton.tsx",["67"],"import React from 'react';\nimport { Button, Center } from \"@chakra-ui/react\";\n\ninterface customButtonProps {\n    _id?: string,\n    type: \"button\" | \"submit\" | \"reset\",\n    label: string,\n    color?: string,\n    disableButton?: boolean\n    click?: () => void,\n    isLoading?: boolean\n}\nexport const CustomButton: React.FC<customButtonProps> = ({ label, type, color = '', disableButton = false, click, isLoading = false }: customButtonProps) => {\n    return (\n        <div>\n            {color !== '' && <Button mt={5} type={type} disabled={disableButton} onClick={click} isLoading={isLoading} colorScheme={color}>{label}</Button>}\n            {color === '' && <Button mt={5} type={type} disabled={disableButton} onClick={click} isLoading={isLoading} >{label}</Button>}\n        </div>\n    );\n}","/home/dev/workspace/Task-List-Typescript-With-API-s/src/theme/index.tsx",[],{"ruleId":"68","severity":1,"message":"69","line":66,"column":8,"nodeType":"70","endLine":66,"endColumn":10,"suggestions":"71"},{"ruleId":"72","severity":1,"message":"73","line":13,"column":56,"nodeType":"74","messageId":"75","endLine":13,"endColumn":58},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":3,"column":10,"nodeType":"82","messageId":"83","endLine":3,"endColumn":13},{"ruleId":"80","severity":1,"message":"84","line":2,"column":18,"nodeType":"82","messageId":"83","endLine":2,"endColumn":24},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history', 'isLoadingList', 'setUserState', and 'user.name'. Either include them or remove the dependency array. You can also do a functional update 'setIsLoadingList(i => ...)' if you only need 'isLoadingList' in the 'setIsLoadingList' call.","ArrayExpression",["85"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-native-reassign",["86"],"no-negated-in-lhs",["87"],"@typescript-eslint/no-unused-vars","'Box' is defined but never used.","Identifier","unusedVar","'Center' is defined but never used.",{"desc":"88","fix":"89"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [history, isLoadingList, setUserState, user.name]",{"range":"90","text":"91"},[1869,1871],"[history, isLoadingList, setUserState, user.name]"]